@page "/login"
@using Forge.Security.Jwt.Shared.Client.Models
@using Forge.Security.Jwt.Shared.Client.Services
@using Microsoft.AspNetCore.WebUtilities
@using Forge.Yoda.Shared.Models;
@using Forge.Yoda.Shared.UI.Models
@inject IAuthenticationService userService
@inject NavigationManager NavigationMgr
@inject IAdditionalData logoutData

@if (showLogin)
{
    <EditForm Model="@authCredentials" OnValidSubmit="LoginUser">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row form-group">
            <div class="col-6">
                <input class="form-control" type="text" @bind-value="authCredentials.Username" placeholder="UserName" />
            </div>
        </div>
        <div class="row form-group">
            <div class="col-6">
                <input class="form-control" type="password" @bind-value="authCredentials.Password" placeholder="Password" />
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>
}
else
{
    <p>Authorizing....</p>
}

@code {
    private string returnUrl = "";
    private bool showLogin = true;
    AuthCredentials authCredentials = new AuthCredentials();

    async Task LoginUser()
    {
        //await _js.WriteToConsole($"Username is {user.UserName}");
        var uri = NavigationMgr.ToAbsoluteUri(NavigationMgr.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var param))
        {
            returnUrl = param.First();
        }
        authCredentials.SecondaryKeys = ((AdditionalData)logoutData).SecondaryKeys;
        Task<AuthResponse> responseTask = userService.AuthenticateUserAsync<AuthCredentials, AuthResponse>(authCredentials);
        showLogin = false;
        AuthResponse authResponse = await responseTask;
        if (string.IsNullOrEmpty(authResponse.AccessToken))
        {
            showLogin = true;
        }
        else
        {
            if (string.IsNullOrEmpty(returnUrl))
            {
                NavigationMgr.NavigateTo("/");
            }
            else
            {
                NavigationMgr.NavigateTo(returnUrl);
            }
        }
    }
}
